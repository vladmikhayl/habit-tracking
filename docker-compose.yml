services:

  # Postgres starts at the beginning
  postgres:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: username
      POSTGRES_PASSWORD: password
    ports:
      - "15432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d
    networks:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U username" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper starts at the beginning
  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "echo", "ruok", "|", "nc", "localhost", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka starts after Zookeeper is fully launched
  kafka:
    image: confluentinc/cp-kafka:7.9.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - backend
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 5

  # Config-server starts after Postgres and Kafka are fully launched
  config-server:
    build:
      context: .
      dockerfile: config-server/Dockerfile
    container_name: config-server
    ports:
      - "8888:8888"
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Discovery starts after Config-server is fully launched
  discovery:
    build:
      context: .
      dockerfile: discovery/Dockerfile
    container_name: discovery
    ports:
      - "8761:8761"
    networks:
      - backend
    depends_on:
      config-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    # the config-server address and profile are specified
    environment:
      - CONFIG_SERVER_URL=http://config-server:8888
      - SPRING_PROFILES_ACTIVE=docker

  # Gateway starts after Discovery is fully launched
  gateway:
    build:
      context: .
      dockerfile: gateway/Dockerfile
    container_name: gateway
    ports:
      - "8080:8080"
    networks:
      - backend
    depends_on:
      discovery:
        condition: service_healthy
    # the config-server address and profile are specified
    environment:
      - CONFIG_SERVER_URL=http://config-server:8888
      - SPRING_PROFILES_ACTIVE=docker

  # Auth starts after Discovery is fully launched
  auth:
    build:
      context: .
      dockerfile: auth/Dockerfile
    container_name: auth
    networks:
      - backend
    depends_on:
      discovery:
        condition: service_healthy
    # the config-server address and profile are specified
    environment:
      - CONFIG_SERVER_URL=http://config-server:8888
      - SPRING_PROFILES_ACTIVE=docker

  # Habit starts after Discovery is fully launched
  habit:
    build:
      context: .
      dockerfile: habit/Dockerfile
    container_name: habit
    networks:
      - backend
    depends_on:
      discovery:
        condition: service_healthy
    # the config-server address and profile are specified
    environment:
      - CONFIG_SERVER_URL=http://config-server:8888
      - SPRING_PROFILES_ACTIVE=docker

  # Report starts after Discovery is fully launched
  report:
    build:
      context: .
      dockerfile: report/Dockerfile
    container_name: report
    networks:
      - backend
    depends_on:
      discovery:
        condition: service_healthy
    # the config-server address and profile are specified
    environment:
      - CONFIG_SERVER_URL=http://config-server:8888
      - SPRING_PROFILES_ACTIVE=docker

  # Subscription starts after Discovery is fully launched
  subscription:
    build:
      context: .
      dockerfile: subscription/Dockerfile
    container_name: subscription
    networks:
      - backend
    depends_on:
      discovery:
        condition: service_healthy
    # the config-server address and profile are specified
    environment:
      - CONFIG_SERVER_URL=http://config-server:8888
      - SPRING_PROFILES_ACTIVE=docker

networks:
  backend:
    driver: bridge

volumes:
  pgdata: